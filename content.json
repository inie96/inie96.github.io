{"pages":[],"posts":[{"title":"史上最全hexo博客搭建步骤详解","text":"前言本篇讲解主要参考codesheep的关于hexo搭建的视频，结合自己踩的一些坑，综合各路大神的指南而成，如果你在实践本篇博文的过程中有任何问题，欢迎和我一起交流~ 搭建博客的目的： 明确我们的目标才不会让你半途而废 社招、校招加分项 追求极客范儿 挑战自己，我很棒 总览一下我们搭建hexo博客的步骤： 搭建node.js环境 安装加速包cnpm hexo安装 使用hexo搭建博客 新建第一篇博文 把博客部署到github 博客换肤以上就是博客搭建过程概览 下面我们按照上面的步骤逐一实现，你也可以拥有属于自己的博客哟~操作的过程中先不用问太多为什么，照做就行了 1、搭建node.js环境1.1 下载node.jshexo是node.js生成的，需要node.js环境 nodejs官网：nodejs.org nodejs官网图 建议：不要下载最新的node版本，我下载的12版本的 12版本list图 自动安装包格式.pkg 傻瓜安装，一直点同意就好了 安装的结果实际上安装了两个文件一个是node.js另一个是npm包管理器,这是搭建hexo必备 1.2 查看安装的node与npm版本 打开终端 12查看node版本：输入 node -v查看npm版本：输入 npm -v 这里codesheep是在root用户下操作的，但是到后面我使用编辑器操作文件会有点麻烦，总是需要root权限，所以这个因人而异吧 啰嗦一句~每次我们安装或者操作什么都要及时检查这个操作是否成功，程序员基操吧 2、安装加速包cnpm因为国内镜像源的安装速度慢，所以我们安装一个淘宝镜像源，为一会安装hexo速度快 2.1利用npm安装cnpm1输入 npm install -g cnpm --registry=https://registry.npm.taobao.org 2.2查看cnpm版本1输入 cnpm -v cnpm版本截图 3、hexo安装3.1用cnpm安装hexo1输入 cnpm install -g hexo-cli 3.2查看hexo版本1输入 hexo -v 图 4、使用hexo搭建博客4.1建一个空的文件夹blog这个文件夹是存放我们博客所有内容的，那么在建文件夹前先看一下我们当前的位置，方便后续寻找我们的blog文件夹在哪 1查看当前位置：输入 pwd 图 123新建blog文件夹：输入 mkdir blog进入blog：输入 cd blog查看当前位置：输入 pwd 此时我们的路径是/blog结尾，接下来是在这个blog文件初始化我们的hexo 4.2 初始化hexo1初始化hexo：输入 init hexo 此时可以看到克隆到了hexo文件和默认landscape主题 进入blog文件查看初始化都自动生成了哪些文件，后续我们写博客都基于这里面的文件，瞅一眼有啥就行 4.3启动博客1启动hexo:输入 hexo s 此时终端会出现 http://localhost:4000/ 表示我们再本地已经启动成功博客，点这个链接进来看看我们搭建的博客以上我们的博客就搭建完成了，是不是没那么难~ 博客有了我们开始写文章吧~5、新建第一篇博文5.1 创建博文1新建博文：输入 hexo n &quot;你的博文标题&quot; 可以看到我们的博文被创建到source/_posts目录下了，并且是.md格式的，到编辑器(我使用的是vscode)里面打开这个文件，开始写你的第一篇博文吧~ 5.2 查看你完成的第一篇博文写完之后，再次启动一下我们的博客，在本地查看我们新写的一篇博文 看下当前你的位置 1输入 pwd 我们后面的操作依然要回到blog文件下面 接着输入 hexo clean 清理一下 1输入 hexo g 生成一下 先不要问为啥，你以后会知道，照做 1输入 hexo s 启动 刷新刚打开的网址，可以看到我们刚写的博文已经出现了 6、把博客部署到github我们想要一个远端地址可以查看我们的博客，推荐github部署方式，免费万岁！ 6.1 创建github仓库网址：github.com 没有账号的自己注册，不赘述啦，毕竟我们的主题是hexo 登录进来 页面右上角，头像的左边👈🏻有个➕号，➕号下拉框里点New repository新建一个仓库 点进来填写Repository name 命名规范：你的用户名.github.io 你的用户名就是旁边的Owner里面写的 比如我的用户名：inie96 那么就是 inie96.github.io 用户部署个人博客的github仓库的命名必须是这个 点 Create repository 创建仓库完成 6.2 安装git部署插件终端进入到blog文件下 1安装git：输入 cnpm install --save hexo-deployer-git 6.3 设置blog文件下的_config.yml文件来编辑器里，找到blog文件下的_config.yml文件 最下面有个# Deployment 找到他 在他下面配置上这三行 1234type: gitrepo: git@github.com:inie96/inie96.github.io.git（这里配置成我们刚创建仓库的ssh地址，注意是ssh）branch: master 图 最终长这样 6.4 向github部署博客终端回到blog 输入 hexo d 接着会提示你输入github账号密码 部署完成后去刷新刚创建的github仓库，此时已经有文件进来了，就是部署成功了 把仓库名拿出来访问inie96.github.io就可以在远端查看博客了~ 以上我们的博客远端部署完成 7、博客换肤7.1 挑选皮肤网址：https://hexo.io/themes/ 7.2 进入喜欢的皮肤的仓库我选的是icarus 仓库地址：https://github.com/ppoffice/hexo-theme-icarus 7.3 下载主题回到终端blog下面 克隆/下载主题：输入 git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus themes/icarus 是我们要下载到的文件位置 此时在文件夹中打开这个路径就可以看到我们下载的主题文件 7.4 给我的博客配置icarus主题修改刚刚我们也改过的blog文件下的_config.yml文件 这个文件还蛮重要 1修改 theme: icarus 修改成themes下的icarus文件名 图 此时我们再次 123hexo cleanhexo ghexo s 在本地查看一下更换的主题 打开 http://localhost:4000/ 查看没有问题，推送到远端 1输入 hexo d 在远端地址查看更改后的皮肤，换肤完成 总结 安装node 安装cnpm 安装hexo 初始化hexo：init hexo 创建hexo博文：hexo n 部署hexo到github 创建github仓库 安装git 配置文件 hexo d 博客换肤 下载主题 git clone 配置文件 hexo d hexo四件套 1234hexo cleanhexo ghexo shexo d 欢迎观看~ 完结撒花~","link":"/2022/05/21/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3/"},{"title":"数组常用属性和方法","text":"创建数组 new关键字方式12//使用 JavaScript 关键词 newvar color= new Array(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;); 字面量方式12//使用数组文本创建var color2 = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]; 在数组中添加值与获取值123456789//数组中添加值color2[3] = 'abc';color2[4] = 'xyz';//获取color2[3] ;//'abc';//获取数组最后一个元素color2[color2.length-1];//获取数组长度color2.length; //5 数组中的方法数组转字符串 如果转成【逗号】号拼接，这个最简单 123//toString() 把数组转换为数组值（以逗号分隔）的字符串。var arr1 = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];arr1.toString(); //&quot;red,blue,green&quot; 如果想用其他符号拼接，用这个 1234//join() 方法也可将所有数组元素结合为一个字符串，可以自定义分隔符var arr2 = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];console.log(arr2.join(&quot;:&quot;)) //red:blue:greenconsole.log(arr2.join(&quot; &quot;)) //red blue green 增删改数组元素 添加新元素 在开头添加123//unshift() 方法（在开头）向数组添加新元素 var arr3 = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];arr3.unshift(&quot;abc&quot;);//[&quot;abc&quot;, &quot;red&quot;, &quot;blue&quot;, &quot;green&quot;] 在结尾添加12//push() 方法（在数组结尾处）向数组添加一个新的元素arr3.push(&quot;xyz&quot;); //[&quot;abc&quot;, &quot;red&quot;, &quot;blue&quot;, &quot;green&quot;,&quot;xyz&quot;] 删除元素 从后面删123//pop() 方法从数组中删除最后一个元素 pop()返回的是被弹出的值var arr4 = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];arr4.pop(); //&quot;green&quot; arr4 ======[&quot;red&quot;, &quot;blue&quot;] 从开头删12//shift() 方法会删除首个数组元素，并把所有其他元素“位移”到更低的索引，返回的是被弹出的值arr4.shift();//&quot;red&quot; 修改元素1234567891011//splice() 方法可删除从 index 处开始的零个或多个元素，并且用参数列表中明的一个或多个值来替换那些被删除的元素。如果从 arrayObject 中删除了元素则返回的是含有被删除的元素的数组var arr5 = [5,6,7,8];// arr5.splice(位置,个数,添加的新元素)arr5.splice(1,1); //删除了6 arr5 的结果是[5,7,8]arr5.splice(1,0,9);//arr5 的结果是[5, 9, 6, 7, 8]arr5.splice(1,2,3);//arr5 的结果是 [5, 3, 8]//slice()返回一个新的数组，包含从 start 到 end （不包括该元素）的arrayObject 中的元素var arr6 = [5,6,7,8];arr6.slice(1,3) //[6, 7]//arr6 仍然还是[5,6,7,8]; 返回的是选定的元素，该方法不会修改原数组 合并数组12345//concat() 方法用于连接两个或多个数组 该方法不会改变原有的数组var arr7 =[1,2,3];var arr8 = [4,5,6];var arr9 = arr7.concat(arr8);//arr9 [1, 2, 3, 4, 5, 6] 排序123456789//sort()排序var arr10 =[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];arr10.sort(); // [&quot;blue&quot;, &quot;green&quot;, &quot;red&quot;]var arr11 = [1,10,5,12,4,9,22];arr11.sort();// [1, 10, 12, 22, 4, 5, 9]//reverse() 方法用于颠倒数组中元素的顺序 会改变原数组arr11.reverse();// [22, 9, 4, 12, 5, 10, 1] 遍历数组for循环1234567891011121314//for循环遍历var arr12 =[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];var str = &quot;&quot;;for(var i=0;i&lt;arr12.length;i++){ str += &quot;&lt;p&gt;&quot;+arr12[i]+&quot;&lt;/p&gt;&quot;};document.getElementById(&quot;test&quot;).innerHTML= str;//forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数。var arr13 =[1,2,3];var a14=[];arr13.forEach(function(item,index){ //item=1 2 3 a14.push(item+1);});console.log(a14); 筛选数组12345678910111213141516171819//filter()对数组的每一项都运行给定的函数，返回 结果为 ture 的项组成的组var arr15 = [2,3,5,6,7,18,9];var a15 = arr15.filter(function(item,index){ return item &gt;5; //满足的条件 大于5的结果[6, 7, 18, 9]});类似于&amp;&amp;//every()对数组的每一项都运行给定的函数，每一项都返回 ture,则返回 true//每一项都满足条件时返回true,只要有一个不满足返回falsevar a16 = arr15.every(function(item,index){ //return item &gt;5; //必须要求每一个数字都&gt;5才会返回true 否则 false return item&gt;1; //true});类似于||//some()只要有一个满足返回true,都不满足返回falsevar a17 = arr15.some(function(item,index){ //return item &gt;5; //只要有一个满 足了条件，返回true return item==0; //false 都不满足 返回false});","link":"/2022/05/29/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95/"}],"tags":[],"categories":[]}